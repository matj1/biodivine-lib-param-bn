name: build
# This should ensure that the workflow won't run on `dev-*` branches, but will
# otherwise execute on any other branch and any pull request (including dev
# branches).
on:
  push:
    branches-ignore:
      - 'dev-*'
  pull_request:
    branches:
      - '*'

env:
  # A fixed version used for testing, so that the builds don't
  # spontaneously break after a few years.
  # Make sure to update this from time to time.
  RUST_VERSION: "1.65.0"
jobs:
  # Check formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Checkout.
        uses: actions/checkout@v3
      - name: Install Rust toolchain.
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
      - name: Rust format check.
        run: cargo fmt --all -- --check

  # Run basic code validity check.
  check:
    needs: fmt
    name: Check
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Checkout.
        uses: actions/checkout@v3
      - name: Install Rust toolchain.
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
      - name: Rust code validity check.
        run: cargo check

  # Run all tests
  test:
    needs: check
    name: Test Suite
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v3
      # Tests need Z3 solver to run.
      - name: Setup Z3
        id: z3
        uses: cda-tum/setup-z3@v1
        with:
          version: 4.11.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout.
        uses: actions/checkout@v3
      - name: Install Rust toolchain.
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
      - name: Run tests.
        run: cargo test --all-features

  # Check code style
  clippy:
    needs: check
    name: Clippy
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Checkout.
        uses: actions/checkout@v3
      - name: Install Rust toolchain.
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
      - name: Run clippy.
        run: cargo clippy

  # Compute code coverage
  codecov:
    needs: test
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout.
        uses: actions/checkout@v3
      - name: Install Rust toolchain.
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
      - name: Setup Z3.
        id: z3
        uses: cda-tum/setup-z3@v1
        with:
          version: 4.11.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup cargo-tarpaulin.
        run: cargo install cargo-tarpaulin
      - name: Run tarpaulin to compute coverage.
        run: cargo tarpaulin --lib --examples --all-features
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml